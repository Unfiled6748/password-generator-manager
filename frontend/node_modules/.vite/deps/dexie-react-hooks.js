import {
  dexie_exports,
  init_dexie
} from "./chunk-XP5VNR6W.js";
import {
  require_react
} from "./chunk-4UQS7KPA.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-2GTGKKMZ.js";

// node_modules/dexie-react-hooks/dist/dexie-react-hooks.js
var require_dexie_react_hooks = __commonJS({
  "node_modules/dexie-react-hooks/dist/dexie-react-hooks.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports, (init_dexie(), __toCommonJS(dexie_exports)), require_react()) : typeof define === "function" && define.amd ? define(["exports", "dexie", "react"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.DexieReactHooks = {}, global.Dexie, global.React));
    })(exports, function(exports2, dexie, React) {
      "use strict";
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      var React__default = _interopDefaultLegacy(React);
      function useObservable(observableFactory, arg2, arg3) {
        var deps;
        var defaultResult;
        if (typeof observableFactory === "function") {
          deps = arg2 || [];
          defaultResult = arg3;
        } else {
          deps = [];
          defaultResult = arg2;
        }
        var monitor = React__default["default"].useRef({
          hasResult: false,
          result: defaultResult,
          error: null
        });
        var _a = React__default["default"].useReducer(function(x) {
          return x + 1;
        }, 0);
        _a[0];
        var triggerUpdate = _a[1];
        var observable = React__default["default"].useMemo(function() {
          var observable2 = typeof observableFactory === "function" ? observableFactory() : observableFactory;
          if (!observable2 || typeof observable2.subscribe !== "function") {
            if (observableFactory === observable2) {
              throw new TypeError("Given argument to useObservable() was neither a valid observable nor a function.");
            } else {
              throw new TypeError("Observable factory given to useObservable() did not return a valid observable.");
            }
          }
          if (!monitor.current.hasResult && typeof window !== "undefined") {
            if (typeof observable2.hasValue !== "function" || observable2.hasValue()) {
              if (typeof observable2.getValue === "function") {
                monitor.current.result = observable2.getValue();
                monitor.current.hasResult = true;
              } else {
                var subscription = observable2.subscribe(function(val) {
                  monitor.current.result = val;
                  monitor.current.hasResult = true;
                });
                if (typeof subscription === "function") {
                  subscription();
                } else {
                  subscription.unsubscribe();
                }
              }
            }
          }
          return observable2;
        }, deps);
        React__default["default"].useDebugValue(monitor.current.result);
        React__default["default"].useEffect(function() {
          var subscription = observable.subscribe(function(val) {
            var current = monitor.current;
            if (current.error !== null || current.result !== val) {
              current.error = null;
              current.result = val;
              current.hasResult = true;
              triggerUpdate();
            }
          }, function(err) {
            var current = monitor.current;
            if (current.error !== err) {
              current.error = err;
              triggerUpdate();
            }
          });
          return typeof subscription === "function" ? subscription : subscription.unsubscribe.bind(subscription);
        }, deps);
        if (monitor.current.error)
          throw monitor.current.error;
        return monitor.current.result;
      }
      function useLiveQuery(querier, deps, defaultResult) {
        return useObservable(function() {
          return dexie.liveQuery(querier);
        }, deps || [], defaultResult);
      }
      function usePermissions(firstArg, table, obj) {
        if (!firstArg)
          throw new TypeError("Invalid arguments to usePermissions(): undefined or null");
        var db;
        if (arguments.length >= 3) {
          if (!("transaction" in firstArg)) {
            throw new TypeError("Invalid arguments to usePermission(db, table, obj): 1st arg must be a Dexie instance");
          }
          if (typeof table !== "string")
            throw new TypeError("Invalid arguments to usePermission(db, table, obj): 2nd arg must be string");
          if (!obj || typeof obj !== "object")
            throw new TypeError("Invalid arguments to usePermission(db, table, obj): 3rd arg must be an object");
          db = firstArg;
        } else {
          if (firstArg instanceof dexie.Dexie)
            throw new TypeError("Invalid arguments to usePermission(db, table, obj): Missing table and obj arguments.");
          if (typeof firstArg.table === "function" && typeof firstArg.db === "object") {
            db = firstArg.db;
            obj = firstArg;
            table = firstArg.table();
          } else {
            throw new TypeError("Invalid arguments to usePermissions(). Expected usePermissions(entity: DexieCloudEntity) or usePermissions(db: Dexie, table: string, obj: DexieCloudObject)");
          }
        }
        if (!("cloud" in db))
          throw new Error("usePermissions() is only for Dexie Cloud but there's no dexie-cloud-addon active in given db.");
        if (!("permissions" in db.cloud))
          throw new Error("usePermissions() requires a newer version of dexie-cloud-addon. Please upgrade it.");
        return useObservable(
          // @ts-ignore
          function() {
            return db.cloud.permissions(obj, table);
          },
          [obj.realmId, obj.owner, table]
        );
      }
      exports2.useLiveQuery = useLiveQuery;
      exports2.useObservable = useObservable;
      exports2.usePermissions = usePermissions;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});
export default require_dexie_react_hooks();
//# sourceMappingURL=dexie-react-hooks.js.map
